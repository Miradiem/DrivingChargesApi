// <auto-generated />
using System;
using DrivingChargesApi.Charges.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrivingChargesApi.Migrations
{
    [DbContext(typeof(ChargeContext))]
    partial class ChargeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.CongestionData.Congestion", b =>
                {
                    b.Property<int>("CongestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CongestionId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.HasKey("CongestionId");

                    b.HasIndex("CityId");

                    b.ToTable("Congestions");
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.CongestionData.Period", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodId"));

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.Property<int>("CongestionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.Property<string>("Validity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PeriodId");

                    b.HasIndex("CongestionId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.CongestionData.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("PeriodId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.LowEmissionData.LowEmission", b =>
                {
                    b.Property<int>("LowEmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LowEmissionId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.HasKey("LowEmissionId");

                    b.HasIndex("CityId");

                    b.ToTable("LowEmissions");
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.UltraLowEmissionData.UltraLowEmission", b =>
                {
                    b.Property<int>("UltraLowEmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UltraLowEmissionId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.HasKey("UltraLowEmissionId");

                    b.HasIndex("CityId");

                    b.ToTable("UltraLowEmissions");
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.CongestionData.Congestion", b =>
                {
                    b.HasOne("DrivingChargesApi.Charges.Data.City", null)
                        .WithMany("Congestions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.CongestionData.Period", b =>
                {
                    b.HasOne("DrivingChargesApi.Charges.Data.CongestionData.Congestion", null)
                        .WithMany("Periods")
                        .HasForeignKey("CongestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.CongestionData.Vehicle", b =>
                {
                    b.HasOne("DrivingChargesApi.Charges.Data.CongestionData.Period", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.LowEmissionData.LowEmission", b =>
                {
                    b.HasOne("DrivingChargesApi.Charges.Data.City", null)
                        .WithMany("LowEmissions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.UltraLowEmissionData.UltraLowEmission", b =>
                {
                    b.HasOne("DrivingChargesApi.Charges.Data.City", null)
                        .WithMany("UltraLowEmissions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.City", b =>
                {
                    b.Navigation("Congestions");

                    b.Navigation("LowEmissions");

                    b.Navigation("UltraLowEmissions");
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.CongestionData.Congestion", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("DrivingChargesApi.Charges.Data.CongestionData.Period", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
